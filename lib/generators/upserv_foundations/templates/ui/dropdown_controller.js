// DO NOT EDIT THIS FILE. This file is autogenerated by Upserv Foundations.
// tooltip_controller.js
import { Controller } from '@hotwired/stimulus'

export default class extends Controller {
  static targets = ['button', 'dropdownItems']

  show() {
    // clicking anywhere on the window calls the hide() function. (see
    // app/javascript/global/dropdown.js) So whenever a click leads to the show, stop
    // propogation so that the click to show does not also trigger the hide() function
    // Note: this does not stop propogation when click is called while hovering over the drop down ites. That is a different issue that is managed by the app/javascript/global/dropdown.js file
    event.stopPropagation()

    // hide any other dropdowns that are open before showing this one
    this.hide()

    // NOTE: need to set to block before updteDropdownItemsPosition because we need to know
    // height and width
    this.dropdownItemsTarget.style.display = 'inline-block'
    this.updteDropdownItemsPosition()
    // NOTE: immetiately set back to none because we will render the clone and not the
    // actual message target (see note below regarding cloning)
    this.dropdownItemsTarget.style.display = 'none'
  }

  hide() {
    const toolTipClones = document.getElementsByClassName(
      'dropdown-items-clone'
    )

    if (toolTipClones.length > 0) {
      for (const toolTipClone of toolTipClones) {
        toolTipClone.remove()
      }
    }
  }

  updteDropdownItemsPosition() {
    const buttonRect = this.buttonTarget.getBoundingClientRect()

    const screenWidth = window.innerWidth

    const spaceLeft = buttonRect.left
    const spaceRight = screenWidth - buttonRect.right

    const screenHeight = window.innerHeight
    const spaceTop = buttonRect.top
    const spaceBottom = screenHeight - buttonRect.bottom

    const dropdownItemsWidthInt = parseFloat(
      window
        .getComputedStyle(this.dropdownItemsTarget)
        .getPropertyValue('width')
    )
    const dropdownItemsHeightInt = parseFloat(
      window
        .getComputedStyle(this.dropdownItemsTarget)
        .getPropertyValue('height')
    )

    // NOTE: if the dropdownItemsTarget is the descendant of a fixed or absolute container
    // then the fixed position will be relative the that container and not the
    // screen... so we clone it render the clone at the bottom of the page body
    // so that we can ensure the fixed position is relative to the screen
    this.dropdownItemsTargetClone = this.dropdownItemsTarget.cloneNode(true)
    this.dropdownItemsTargetClone.classList.add('dropdown-items-clone')

    // bottom right
    if (
      spaceBottom >= dropdownItemsHeightInt &&
      spaceRight >= dropdownItemsWidthInt
    ) {
      this.positionBottomRight(buttonRect)

      // bottom left
    } else if (
      spaceBottom >= dropdownItemsHeightInt &&
      spaceLeft >= dropdownItemsWidthInt
    ) {
      this.dropdownItemsTargetClone.style.left =
        buttonRect.right - dropdownItemsWidthInt + 'px'
      this.dropdownItemsTargetClone.style.top = buttonRect.bottom + 'px'

      // top right
    } else if (
      spaceTop >= dropdownItemsHeightInt &&
      spaceRight >= dropdownItemsWidthInt
    ) {
      this.dropdownItemsTargetClone.style.left = buttonRect.left + 'px'
      this.dropdownItemsTargetClone.style.top =
        buttonRect.top - dropdownItemsHeightInt + 'px'

      // top left
    } else if (
      spaceTop >= dropdownItemsHeightInt &&
      spaceLeft >= dropdownItemsWidthInt
    ) {
      this.dropdownItemsTargetClone.style.left =
        buttonRect.right - dropdownItemsWidthInt + 'px'
      this.dropdownItemsTargetClone.style.top =
        buttonRect.top - dropdownItemsHeightInt + 'px'
      // bottom right fall back if no space
      // NOTE: should fall back to region with most space rather than defaulting to bottom right... Add this later
    } else {
      this.positionBottomRight(buttonRect)
    }
    document.body.appendChild(this.dropdownItemsTargetClone)
    // set max height in case the drop down has so many items that it flows off the screen
    const dropdownItemsTargetClonRect =
      this.dropdownItemsTargetClone.getBoundingClientRect()
    console.log('screenHeight', screenHeight)
    console.log(
      'dropdownItemsTargetClonRect.top',
      dropdownItemsTargetClonRect.top
    )
    const maxHeight = screenHeight - dropdownItemsTargetClonRect.top - 10
    this.dropdownItemsTargetClone.style.maxHeight = `${maxHeight}px`
  }

  positionBottomRight(buttonRect) {
    this.dropdownItemsTargetClone.style.left = buttonRect.left + 'px'
    this.dropdownItemsTargetClone.style.top = buttonRect.bottom + 'px'
  }
}
