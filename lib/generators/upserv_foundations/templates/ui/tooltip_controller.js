// DO NOT EDIT THIS FILE. This file is autogenerated by Upserv Foundations.
// tooltip_controller.js
import { Controller } from '@hotwired/stimulus'

export default class extends Controller {
  static targets = ['button', 'message']

  showMessage() {
    // NOTE: need to set to block before updateTooltipPosition because we need to know
    // height and width
    this.messageTarget.style.display = 'block'
    this.updateTooltipPosition()
  }

  hideMessage() {
    this.messageTarget.style.display = 'none'
  }

  updateTooltipPosition() {
    const buttonRect = this.buttonTarget.getBoundingClientRect()

    const makeUpForVerticalPadding = 4
    const widthSpacer = 8

    const screenWidth = window.innerWidth
    const spaceLeft = buttonRect.left
    const spaceRight = screenWidth - buttonRect.right

    const screenHeight = window.innerHeight
    const spaceTop = buttonRect.top
    const spaceBottom = screenHeight - buttonRect.bottom

    const messageWidthInt = parseFloat(
      window.getComputedStyle(this.messageTarget).getPropertyValue('width')
    )
    const messageHeightInt = parseFloat(
      window.getComputedStyle(this.messageTarget).getPropertyValue('height')
    )
    const buttonHeightInt = parseFloat(
      window.getComputedStyle(this.buttonTarget).getPropertyValue('height')
    )

    // bottom right
    if (
      spaceBottom >=
        messageHeightInt - buttonHeightInt - makeUpForVerticalPadding &&
      spaceRight >= widthSpacer + messageWidthInt
    ) {
      this.positionBottomRight(
        buttonRect,
        widthSpacer,
        makeUpForVerticalPadding
      )

      // bottom-left
    } else if (
      spaceBottom >=
        messageHeightInt - buttonHeightInt - makeUpForVerticalPadding &&
      spaceLeft >= widthSpacer + messageWidthInt
    ) {
      this.messageTarget.style.left =
        buttonRect.left - widthSpacer - messageWidthInt + 'px'
      this.messageTarget.style.top =
        buttonRect.top - makeUpForVerticalPadding + 'px'

      // top-righ
    } else if (
      spaceTop >=
        messageHeightInt - buttonHeightInt - makeUpForVerticalPadding &&
      spaceRight >= widthSpacer + messageWidthInt
    ) {
      this.messageTarget.style.left = buttonRect.right + widthSpacer + 'px'
      this.messageTarget.style.top =
        buttonRect.bottom - messageHeightInt + makeUpForVerticalPadding + 'px'

      // top-left
    } else if (
      spaceTop >=
        messageHeightInt - buttonHeightInt - makeUpForVerticalPadding &&
      spaceLeft >= widthSpacer + messageWidthInt
    ) {
      this.messageTarget.style.left =
        buttonRect.left - widthSpacer - messageWidthInt + 'px'
      this.messageTarget.style.top =
        buttonRect.bottom - messageHeightInt + makeUpForVerticalPadding + 'px'

      // bottom right fall back if no space
      // NOTE: should fall back to region with most space rather than defaulting to bottom right
    } else {
      this.positionBottomRight(
        buttonRect,
        widthSpacer,
        makeUpForVerticalPadding
      )
    }
  }

  positionBottomRight(buttonRect, widthSpacer, makeUpForVerticalPadding) {
    this.messageTarget.style.left = buttonRect.right + widthSpacer + 'px'
    this.messageTarget.style.top =
      buttonRect.top - makeUpForVerticalPadding + 'px'
  }
}
