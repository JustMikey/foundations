// DO NOT EDIT THIS FILE. This file is autogenerated by Upserv Foundations.
import { Controller } from '@hotwired/stimulus'

export default class extends Controller {
  // NOTE: known limitation. if the page loads small and then resized
  // to a size larger than the original size, any dynamic width columns
  // will not grow past their original size. Dynamic width columns
  // (currently) can only get smaller
  connect() {
    // Call the function initially and whenever the window is resized
    this.adjustPageBodyColumnsHeight()
    window.addEventListener('resize', this.adjustPageBodyColumnsHeight)

    const body = document.getElementById('page-body-columns')
    const firstColumn = body.firstElementChild

    // Allow scroll over margin left of first column
    body.addEventListener('wheel', function (event) {
      let firstColumnWindowOffsetX = 0
      let currentElement = firstColumn

      // Loop through the offset parents and accumulate the offsetLeft values
      while (currentElement) {
        firstColumnWindowOffsetX += currentElement.offsetLeft
        currentElement = currentElement.offsetParent
      }
      // Subtract the scroll offset of the window to get the distance relative to the viewport
      firstColumnWindowOffsetX -= window.pageXOffset

      // Get the horizontal offset of the event relative to the viewport
      const eventOffsetX = event.clientX
      // Check if the event is happening within the left margin area
      // This example assumes the left margin is part of the parent container
      // const isOverLeftMargin = eventOffsetX < scrollOffsetX
      const isOverLeftMargin = eventOffsetX < firstColumnWindowOffsetX

      if (isOverLeftMargin) {
        // Prevent the default scroll behavior of the whole page
        event.preventDefault()

        // Adjust the scrollTop property based on the wheel delta
        // This moves the scrollable content up or down
        firstColumn.scrollTop += event.deltaY
      }
    })
  }

  adjustPageBodyColumnsHeight() {
    // Center the body columns and make scrolling great
    const body = document.getElementById('page-body-columns')
    const firstColumn = body.firstElementChild
    const lastColumn = body.lastElementChild
    const bodyComputedStyle = window.getComputedStyle(body)

    // save the last column width so we know it's original value
    // at page load (we will use this later because we add padding
    // to the last column which impacts the width of it's contents...
    // so what we do is, after we add padding to the last column, we
    // then add the same amount as the padding we just added but we add
    // it to the original width and set it as the new width of the collumn
    // this way the contents width are not impacted)
    if (!lastColumn.hasAttribute('data-width')) {
      lastColumn.setAttribute('data-width', lastColumn.clientWidth)
    }
    // same for body max-width
    // when starting this we want to find the margin left and right of the body
    // in order to do that, there needs to be a max-width set on the body
    // so we need to save the max-width of the body so we can reset it later to
    // help find the margin
    if (!body.hasAttribute('data-max-width')) {
      body.setAttribute('data-max-width', bodyComputedStyle.maxWidth)
    }
    // Reset the body and column styles to their original values
    firstColumn.style.marginLeft = '0px'
    lastColumn.style.paddingRight = '0px'
    body.style.marginRight = 'auto'
    body.style.marginLeft = 'auto'
    if (lastColumn.hasAttribute('data-width')) {
      lastColumn.style.width = lastColumn.getAttribute('data-width')
    }
    if (body.hasAttribute('data-max-width')) {
      body.style.maxWidth = body.getAttribute('data-max-width')
    }

    // Extract the right margin value of the body so we can apply it to the
    // lastColumn as padding and the firstColumn as margin (see comments as to
    // why margin vs. padding on each)
    const marginRight = bodyComputedStyle.marginRight
    // Apply the right margin value as right padding on the lastColumn
    // use margin so width isn not impacted (note this require funky js
    // above to help with scroll bar)
    firstColumn.style.marginLeft = marginRight
    // Apply the right margin value as right padding on the lastColumn
    // use padding so scroll bar is to the right and you can scroll over it
    // (this requires funky js to set width - see below and above)
    lastColumn.style.paddingRight = marginRight
    // update lastColumn width to be the original width value plus the new padding
    // so that the width is not impacted by the padding
    const lastColumnWidth =
      parseFloat(lastColumn.getAttribute('data-width')) +
      parseFloat(marginRight) +
      'px'
    lastColumn.style.width = lastColumnWidth
    // since we moved margin from the body to the first and last columns
    // we now need to make the body wider by the same amount... which we could
    // calculate (below commented out) or we can simply set it to 100% which
    // is should be the same thing
    body.style.maxWidth = '100%'
    // // update body max-width to be the current value plus margiRight x 2
    // const bodyMaxWidth =
    //   parseFloat(bodyComputedStyle.maxWidth) + parseFloat(marginRight) * 2
    // body.style.maxWidth = bodyMaxWidth + 'px'
    // remove the margin on the body because it was just moved to the first and
    // last columns
    // no need to set to zero px because margin left and right are set to auto so
    // when we make the maxWdith 100% they automatically become zero
    // body.style.marginRight = '0px'
    // body.style.marginLeft = '0px'

    // set the height of the body
    const container = document.getElementById('page-container')
    const header = document.getElementById('page-header')
    const containerHeight = container.clientHeight
    const headerHeight = header?.clientHeight || 0
    // Get the computed styles of the container to include padding
    const containerStyles = window.getComputedStyle(container)
    const paddingTop = parseFloat(containerStyles.paddingTop)
    const paddingBottom = parseFloat(containerStyles.paddingBottom)

    const bodyHeight =
      containerHeight - headerHeight - paddingTop - paddingBottom
    body.style.height = bodyHeight + 'px'
  }
}
