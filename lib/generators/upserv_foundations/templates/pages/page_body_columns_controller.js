// DO NOT EDIT THIS FILE. This file is autogenerated by Upserv Foundations.
import { Controller } from '@hotwired/stimulus'

export default class extends Controller {
  // NOTE: known limitation. if the page loads small and then resized
  // to a size larger than the original size, any dynamic width columns
  // will not grow past their original size. Dynamic width columns
  // (currently) can only get smaller
  connect() {
    // Call the function initially and whenever the window is resized
    this.adjustPageBodyColumnsHeight()
    window.addEventListener('resize', this.adjustPageBodyColumnsHeight)
  }

  // known limitations
  // - tailwind % width classes - system will not be able to recognize them as
  //   % width. Basically breaks the last column on large pages but its't not
  //   terribe
  // - dynamic width non-100% (they appear to shink as the page goes beyond
  //   max width because while they are actually expanding, the padding
  //   is growing too)
  adjustPageBodyColumnsHeight() {
    // Center the body columns when page is wide; update height
    const body = document.getElementById('page-body-columns')
    const bodyComputedStyle = window.getComputedStyle(body)

    // reset the body max-width to the original value
    // this needs to be outside / before the if statement
    // because... (why again? can't remember but it's important)
    if (body.hasAttribute('data-max-width')) {
      body.style.maxWidth = body.getAttribute('data-max-width')
    }

    // if the body width is equal or greater than the max, we want to move
    // body margin to padding on the first and last columns (which gets tricky
    // but ulimately centers the body columns and makes scrolling great)
    if (body.offsetWidth >= parseFloat(bodyComputedStyle.maxWidth)) {
      // store the original max-width value on first pass through
      if (!body.hasAttribute('data-max-width')) {
        body.setAttribute('data-max-width', bodyComputedStyle.maxWidth)
      }

      const firstColumn = body.firstElementChild
      const firstColumnComputedStyle = window.getComputedStyle(firstColumn)
      if (!firstColumn.hasAttribute('data-original-padding-left')) {
        firstColumn.setAttribute(
          'data-original-padding-left',
          firstColumnComputedStyle.paddingLeft
        )
      }
      const lastColumn = body.lastElementChild

      // Reset the body and column styles to their original values
      if (lastColumn.hasAttribute('data-added-padding-right')) {
        if (lastColumn.style.width.includes('%')) {
          // do nothing because % will manage the width. It's not quite perfect but it's close enough
        } else {
          // with fixed width, we adjust to revert to original width
          lastColumn.style.width =
            lastColumn.offsetWidth -
            parseFloat(lastColumn.getAttribute('data-added-padding-right')) -
            // it's off by 1/2 pixel... We need to round somewhere but I couldn't figure it out
            0.5 +
            'px'
        }
        if (firstColumn.style.width.includes('%')) {
          // do nothing because % will manage the width. It's not quite perfect but it's close enough
        } else {
          // with fixed width, we adjust to revert to original width
          firstColumn.style.width =
            firstColumn.offsetWidth -
            parseFloat(lastColumn.getAttribute('data-added-padding-right')) -
            // it's off by 1/2 pixel... We need to round somewhere but I couldn't figure it out
            0.5 +
            'px'
        }
      }
      // use firstColumn data-original-padding-left to reset padding
      firstColumn.style.paddingLeft = firstColumn.getAttribute(
        'data-original-padding-left'
      )
      lastColumn.style.paddingRight = '0px'
      body.style.marginLeft = 'auto'
      body.style.marginRight = 'auto'

      // start converting body margin to first and last column padding
      const marginY = bodyComputedStyle.marginRight
      if (firstColumn.style.width.includes('%')) {
        // with % just add padding and let % manage the width
        const marginYInt = parseFloat(marginY)
        const originalPaddingLeftInt = parseFloat(
          firstColumn.getAttribute('data-original-padding-left')
        )
        const newPaddingLeft = marginYInt + originalPaddingLeftInt
        marginYInt + originalPaddingLeftInt + 'px'
        firstColumn.style.paddingLeft = newPaddingLeft + 'px'
      } else {
        // convert marginY and firstColumn.getAttribute('data-original-padding-left') to integers and then add them together and then add 'px'
        const marginYInt = parseFloat(marginY)
        const originalPaddingLeftInt = parseFloat(
          firstColumn.getAttribute('data-original-padding-left')
        )
        const newPaddingLeft = marginYInt + originalPaddingLeftInt
        marginYInt + originalPaddingLeftInt + 'px'
        firstColumn.style.paddingLeft = newPaddingLeft + 'px'
        // firstColumn.style.paddingLeft = marginY
        firstColumn.style.width =
          firstColumn.offsetWidth + parseFloat(marginY) + 'px'
      }
      if (lastColumn.style.width.includes('%')) {
        // with % just add padding and let % manage the width
        lastColumn.style.paddingRight = marginY
      } else {
        // with fixed width, add padding and then adjust width accordingly
        lastColumn.style.paddingRight = marginY
        lastColumn.style.width =
          lastColumn.offsetWidth + parseFloat(marginY) + 'px'
      }
      // this is used to reset back to original
      lastColumn.setAttribute('data-added-padding-right', marginY)
      const bodyMaxWidth =
        parseFloat(bodyComputedStyle.width) + parseFloat(marginY) * 2
      body.style.maxWidth = bodyMaxWidth + 'px'
    }

    // set the height of the body
    const container = document.getElementById('page-container')
    const header = document.getElementById('page-header')
    const containerHeight = container.clientHeight
    const headerHeight = header?.clientHeight || 0
    // Get the computed styles of the container to include padding
    const containerStyles = window.getComputedStyle(container)
    const paddingTop = parseFloat(containerStyles.paddingTop)
    const paddingBottom = parseFloat(containerStyles.paddingBottom)

    const bodyHeight =
      containerHeight - headerHeight - paddingTop - paddingBottom
    body.style.height = bodyHeight + 'px'
  }
}
