// this is basically the same as body but would rather
// edit this than add styles to body
#page-container {
  height: 100%;
  width: 100%;
  // flex col for header and body to stack
  display: flex;
  flex-direction: column;
  // no horizontal padding because we want the page body scrollbar
  // to be on the far right
  // no padding bottom because when page body is taller than page
  // container, we want the page body to overflow all the way to the bottom
  // rather than having 0.75rem gap
  // add padding top so that there is a gap between the top of the page
  // and whatever is next - which could be the page header or the page body
  // if the page header is skipped. This way the top of the page padding is
  // the whether the page header is included or not
  padding-top: 0.75rem;
}
/////

// page header container. remains at top when body scrolls
#page-header {
  // the page_header component has min and max width limitors so
  // we set width here to 100% so that it fills out the width according
  // to the limits set on the component
  width: 100%;
  // this is a replacement for align items on the parent
  // because align items doesn't play well with overflow
  // (see .page-container above)
  margin-left: auto;
  margin-right: auto;
  // tbh idk what this does
  vertical-align: bottom;
  // no padding top because page container has it
  padding: 0rem 0.75rem 0.75rem;
}

#page-header-title-row {
  display: flex;
  gap: 0.5rem;
}

#page-header-title-container {
}

#page-header-title {
  font-size: 1.25rem;
  * {
    font-size: 1.25rem;
  }
}

#page-header-subtitle {
  font-size: 1rem;
  * {
    font-size: 1rem;
  }
}

#page-header-action-buttons {
  font-size: 1.25rem;
  * {
    font-size: 1.25rem;
  }
  display: flex;
  margin-left: auto;
  // align items to the top with padding so they stay in
  // the same position whether there is a subtitle or not
  align-items: flex-start;
  gap: 0.5rem;
  // this helps buttons and icons line up with title whether there is a
  // subtitle or not
  button,
  .btn {
    margin-top: -0.2rem;
  }
  i {
    padding-top: 0.3rem;
  }
}

#page-header.small {
  #page-header-title-row {
    display: block;
  }

  #page-header-title-container {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #page-header-title {
    text-align: center;
  }

  #page-header-subtitle {
    text-align: center;
  }

  #page-header-action-buttons {
    margin: 0;
    justify-content: center;
    align-items: center;
    // reset btn and i so they are center aligned
    button,
    .btn {
      margin-top: 0rem;
    }
    i {
      padding-top: 0rem;
    }
  }

  .tabs {
    justify-content: center;
  }
}

#page-header-divider {
  margin: 0rem 0.75rem 0rem;
  border-bottom: 1px solid var(--divider1-color);
}

// tbh idk why the page body aligns center on large screens but it does
// I would expec the parent to need to have align itms (it is flex / flex
// column). It might be because the margin left / right auto on the page
// header. idk. Also, Idk if overflow x is needed. I get overflow but idk
// about overflow y
// actual page body that scrolls vertially. It's more of a wrapper of the
// page body max width and ultimately the page contents
#page-body {
  overflow-y: overlay;
  overflow-x: overlay;
  height: 100%;
  width: 100%;
  // center page max width
  display: flex;
  justify-content: center;
}

// this actually holds the contents of the page body
#page-body-max-width {
  // min and max width will be added to this element via ruby code
  // so here we set width to 100% so that it fills out the width according
  // to the limits set on the component
  width: 100%;
  // no padding top because page container or page header (if included) will have it
  // no padding right because cards will have it
  // no padding bottom because cards will have it
  // add padding left so that cards will line up with the header
  padding: 0rem 0rem 0rem 0.75rem;
}

// actual page body when there are columns
#page-body-columns {
  // this mimicks
  // because align items doesn't play well with overflow
  // (see .page-container above)
  margin-left: auto;
  margin-right: auto;
  // take up full height and width, hide overflow because overflow
  // should happen on child, not here
  // height is set via javascript when the page loads and is resized
  // this way the page-body-columns takes size of page-container less
  // page header (js is the only way I could get this to work)
  width: 100%;
  // set columns side by side without wrapping
  display: flex;
}

// single column that scrolls independently of other columns
.page-body-column {
  display: flex;
  flex-direction: column;
  height: 100%;
  // by having overflow overly on x and y, this basically overrides the
  // overaly on the page max width container because now, these columns
  // combined should not make the page max width container overflow
  overflow: overlay;
  // no padding top because page container or page header (if included) will have it
  // no padding right because cards will have it
  // no padding bottom because cards will have it
  // add padding left so that first columns will line up with the header and other columns
  // will be separate from the scrollbar for the column to their left
  padding: 0rem 0rem 0rem 0.75rem;
}
